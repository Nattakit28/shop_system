// quick-test.js - ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏π‡∏ó‡∏Ç‡∏≠‡∏á backend
// ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢: node quick-test.js

const mysql = require('mysql2/promise');

// Database configuration
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'online_shop',
  port: process.env.DB_PORT || 3306,
  charset: 'utf8mb4'
};

async function testDatabase() {
  let connection;
  
  try {
    console.log('üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    console.log('üìä Config:', { ...dbConfig, password: '***' });
    
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    // Test 1: Check database connection
    const [testResult] = await connection.execute('SELECT 1 as test, NOW() as current_time');
    console.log('‚úÖ Test 1 - Database Query:', testResult[0]);
    
    // Test 2: Check settings table
    const [tableInfo] = await connection.execute(`
      SELECT TABLE_NAME, TABLE_ROWS, CREATE_TIME, UPDATE_TIME 
      FROM information_schema.TABLES 
      WHERE TABLE_SCHEMA = ? AND TABLE_NAME = 'settings'
    `, [dbConfig.database]);
    
    if (tableInfo.length > 0) {
      console.log('‚úÖ Test 2 - Settings table exists:', tableInfo[0]);
    } else {
      console.log('‚ùå Test 2 - Settings table not found');
      return;
    }
    
    // Test 3: Check current settings
    const [currentSettings] = await connection.execute(
      'SELECT setting_key, setting_value, created_at, updated_at FROM settings ORDER BY setting_key'
    );
    console.log(`‚úÖ Test 3 - Current settings (${currentSettings.length} items):`);
    currentSettings.forEach(setting => {
      console.log(`   - ${setting.setting_key}: "${setting.setting_value}"`);
    });
    
    // Test 4: Try to insert/update a test setting
    console.log('üß™ Test 4 - Testing INSERT/UPDATE...');
    
    const testKey = 'test_setting_' + Date.now();
    const testValue = 'test_value_' + Date.now();
    
    await connection.execute(`
      INSERT INTO settings (setting_key, setting_value, created_at, updated_at)
      VALUES (?, ?, NOW(), NOW())
      ON DUPLICATE KEY UPDATE 
        setting_value = VALUES(setting_value),
        updated_at = NOW()
    `, [testKey, testValue]);
    
    console.log(`‚úÖ Test 4 - Insert/Update successful: ${testKey} = ${testValue}`);
    
    // Test 5: Clean up test data
    await connection.execute('DELETE FROM settings WHERE setting_key = ?', [testKey]);
    console.log('‚úÖ Test 5 - Cleanup successful');
    
    // Test 6: Check admins table
    const [adminCount] = await connection.execute('SELECT COUNT(*) as count FROM admins WHERE status = "active"');
    console.log(`‚úÖ Test 6 - Active admins: ${adminCount[0].count}`);
    
    console.log('\nüéâ ‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß! ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    
  } catch (error) {
    console.error('‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    
    if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username/password ‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MySQL server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
    } else if (error.code === 'ER_BAD_DB_ERROR') {
      console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "online_shop" ‡∏Å‡πà‡∏≠‡∏ô');
    }
    
  } finally {
    if (connection) {
      await connection.end();
      console.log('üì™ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß');
    }
  }
}

async function testSpecificSettings() {
  let connection;
  
  try {
    console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Settings ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á...');
    
    connection = await mysql.createConnection(dbConfig);
    
    const testSettings = {
      shop_name: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡πâ‡∏≤‡∏ô ' + new Date().toLocaleString('th-TH'),
      promptpay_number: '0987654321',
      shop_address: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      shop_phone: '02-987-6543',
      shop_email: 'test@example.com'
    };
    
    console.log('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', testSettings);
    
    // Update each setting
    for (const [key, value] of Object.entries(testSettings)) {
      try {
        await connection.execute(`
          INSERT INTO settings (setting_key, setting_value, created_at, updated_at)
          VALUES (?, ?, NOW(), NOW())
          ON DUPLICATE KEY UPDATE 
            setting_value = VALUES(setting_value),
            updated_at = NOW()
        `, [key, value]);
        
        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ${key} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } catch (settingError) {
        console.error(`‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ${key} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, settingError.message);
      }
    }
    
    // Verify updates
    const [verifyResults] = await connection.execute(`
      SELECT setting_key, setting_value, updated_at 
      FROM settings 
      WHERE setting_key IN ('shop_name', 'promptpay_number', 'shop_address', 'shop_phone', 'shop_email')
      ORDER BY setting_key
    `);
    
    console.log('\n‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:');
    verifyResults.forEach(result => {
      console.log(`   - ${result.setting_key}: "${result.setting_value}" (${result.updated_at})`);
    });
    
    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Settings ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    
  } catch (error) {
    console.error('‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Settings ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
async function runAllTests() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ Settings...');
  console.log('='.repeat(50));
  
  await testDatabase();
  await testSpecificSettings();
  
  console.log('\n' + '='.repeat(50));
  console.log('üèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
}

// ‡∏£‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  runAllTests().catch(error => {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
    process.exit(1);
  });
}

module.exports = {
  testDatabase,
  testSpecificSettings,
  runAllTests
};