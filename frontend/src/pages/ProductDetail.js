import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { productAPI } from '../services/api';

// ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô formatCurrency ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å component ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
const formatCurrency = (amount) => {
  try {
    const numAmount = parseFloat(amount);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (isNaN(numAmount)) {
      console.warn('Invalid amount for currency formatting:', amount);
      return '‡∏ø0';
    }
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ toLocaleString
    const formatted = numAmount.toLocaleString('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 2
    });
    
    return `‡∏ø${formatted}`;
  } catch (error) {
    console.error('Error formatting currency:', error);
    return `‡∏ø${parseFloat(amount) || 0}`;
  }
};

const ProductDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [product, setProduct] = useState(null);
  const [quantity, setQuantity] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedImage, setSelectedImage] = useState(0);
  const [toastMessage, setToastMessage] = useState('');

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ localStorage ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  const getCartFromStorage = () => {
    try {
      return JSON.parse(localStorage.getItem('cart') || '[]');
    } catch (error) {
      console.error('Error accessing localStorage:', error);
      return [];
    }
  };

  const setCartToStorage = (cart) => {
    try {
      localStorage.setItem('cart', JSON.stringify(cart));
      window.dispatchEvent(new Event('cartUpdated'));
      return true;
    } catch (error) {
      console.error('Error saving to localStorage:', error);
      return false;
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  const getProductPrice = (productData) => {
    if (!productData) return 0;
    
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤
    const possiblePrices = [
      productData.price,
      productData.Price,
      productData.data?.price
    ];
    
    for (const price of possiblePrices) {
      if (price !== undefined && price !== null && !isNaN(parseFloat(price))) {
        return parseFloat(price);
      }
    }
    
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å API:', productData);
    return 0; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á)
  };

  // ‚úÖ Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
  useEffect(() => {
    if (product) {
      console.log('üîç === PRODUCT DEBUG ===');
      console.log('Raw Product Object:', product);
      console.log('Product Keys:', Object.keys(product));
      console.log('Product JSON:', JSON.stringify(product, null, 2));
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö price ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
      console.log('üîç Price Analysis:');
      console.log('- product.price:', product.price, typeof product.price);
      console.log('- product.Price:', product.Price, typeof product.Price);
      console.log('- product.PRICE:', product.PRICE, typeof product.PRICE);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö nested object
      if (product.data) {
        console.log('- product.data:', product.data);
        console.log('- product.data.price:', product.data?.price);
      }
      
      console.log('========================');
    }
  }, [product]);

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ id ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if (!id || isNaN(id) || parseInt(id) <= 0) {
          setError('‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
          setLoading(false);
          return;
        }
        
        console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: ${id}`);
        const response = await productAPI.getProduct(id);
        
        console.log('‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:', response.data);
        
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        console.log('üîç API Response Structure:');
        console.log('- response:', response);
        console.log('- response.data:', response.data);
        console.log('- response.data type:', typeof response.data);
        
        // ‡∏ñ‡πâ‡∏≤ response.data ‡∏°‡∏µ nested object ‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô
        if (response.data && response.data.data) {
          console.log('üì¶ Found nested data structure');
          setProduct(response.data.data); // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å nested object
        } else {
          setProduct(response.data); // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å response.data ‡∏ï‡∏£‡∏á‡πÜ
        }
        
      } catch (err) {
        console.error('‚ùå Error fetching product:', err);
        
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        if (err.response) {
          const status = err.response.status;
          const errorMessage = err.response.data?.message || err.response.data?.error;
          
          switch (status) {
            case 400:
              setError('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
              break;
            case 404:
              setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£');
              break;
            case 500:
              setError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${errorMessage || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'}`);
              console.error('Server Error Details:', err.response.data);
              break;
            default:
              setError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (${status}): ${errorMessage || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ'}`);
          }
        } else if (err.request) {
          if (!navigator.onLine) {
            setError('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
          } else {
            setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
          }
        } else {
          setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏');
        }
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchProduct();
    } else {
      setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
      setLoading(false);
    }
  }, [id]);

  const retryFetch = () => {
    const fetchProduct = async () => {
      try {
        setLoading(true);
        setError(null);
        const response = await productAPI.getProduct(id);
        setProduct(response.data);
      } catch (err) {
        setError('‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
      } finally {
        setLoading(false);
      }
    };
    fetchProduct();
  };

  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addToCart
  const addToCart = () => {
    if (!product) {
      console.error('‚ùå No product data to add to cart');
      return;
    }
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    const productPrice = getProductPrice(product);
    const productName = product.name || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';
    const productId = product.id;
    
    if (!productId) {
      console.error('‚ùå Product ID is missing');
      setToastMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
      setTimeout(() => setToastMessage(''), 3000);
      return;
    }
    
    if (productPrice <= 0) {
      console.error('‚ùå Product price is invalid:', productPrice);
      setToastMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      setTimeout(() => setToastMessage(''), 3000);
      return;
    }
    
    console.log('üõí Adding to cart:', {
      id: productId,
      name: productName,
      price: productPrice,
      quantity: quantity,
      image_url: product.image_url
    });
    
    const cart = getCartFromStorage();
    const existingItem = cart.find(item => item.id === productId);
    
    if (existingItem) {
      existingItem.quantity += quantity;
      console.log('üì¶ Updated existing item quantity:', existingItem);
    } else {
      const newItem = {
        id: productId,
        name: productName,
        price: productPrice,
        image_url: product.image_url || '/api/placeholder/100/100',
        quantity: quantity
      };
      cart.push(newItem);
      console.log('üì¶ Added new item to cart:', newItem);
    }
    
    const success = setCartToStorage(cart);
    
    if (success) {
      setToastMessage(`‡πÄ‡∏û‡∏¥‡πà‡∏° ${productName} (${quantity} ‡∏ä‡∏¥‡πâ‡∏ô) ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!`);
      setTimeout(() => setToastMessage(''), 3000);
      console.log('‚úÖ Cart updated successfully');
    } else {
      setToastMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤');
      setTimeout(() => setToastMessage(''), 3000);
      console.error('‚ùå Failed to save cart to localStorage');
    }
  };

  const buyNow = () => {
    addToCart();
    navigate('/cart');
  };

  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£ validate quantity
  const handleQuantityChange = (newQuantity) => {
    const qty = parseInt(newQuantity);
    
    if (isNaN(qty) || qty < 1) {
      setQuantity(1);
    } else if (qty > product?.stock_quantity) {
      setQuantity(product.stock_quantity);
    } else {
      setQuantity(qty);
    }
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...</p>
      </div>
    );
  }

  if (error || !product) {
    return (
      <div className="error-container">
        <div className="error-message">
          <h2>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
          <p>{error || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'}</p>
          
          {/* Debug information - ‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô production */}
          <div className="debug-info" style={{ 
            background: '#f5f5f5', 
            padding: '10px', 
            margin: '10px 0', 
            borderRadius: '4px',
            fontSize: '12px',
            color: '#666'
          }}>
            <p><strong>Product ID:</strong> {id}</p>
            <p><strong>Online Status:</strong> {navigator.onLine ? 'Online' : 'Offline'}</p>
          </div>
        </div>
        
        <div className="error-actions">
          <button onClick={retryFetch} className="btn btn-secondary">
            üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          </button>
          <button onClick={() => navigate('/products')} className="btn btn-primary">
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          </button>
          <button onClick={() => navigate(-1)} className="btn btn-secondary">
            ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
          </button>
        </div>
      </div>
    );
  }

  const isOutOfStock = (product?.stock_quantity || 0) === 0;
  const mockImages = [
    product.image_url || '/api/placeholder/400/400',
    '/api/placeholder/400/400',
    '/api/placeholder/400/400'
  ];

  return (
    <div className="product-detail">
      {/* ‚úÖ Toast Message */}
      {toastMessage && (
        <div className="toast-message success">
          {toastMessage}
        </div>
      )}
      
      <div className="container">
        {/* Breadcrumb */}
        <nav className="breadcrumb">
          <button onClick={() => navigate(-1)} className="back-btn">
            ‚Üê ‡∏Å‡∏•‡∏±‡∏ö
          </button>
          <span className="breadcrumb-separator">/</span>
          <span>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
          <span className="breadcrumb-separator">/</span>
          <span>{product.category_name}</span>
          <span className="breadcrumb-separator">/</span>
          <span className="current">{product.name}</span>
        </nav>

        <div className="product-detail-content">
          {/* Product Images */}
          <div className="product-images">
            <div className="main-image">
              <img 
                src={mockImages[selectedImage]} 
                alt={product.name}
                className="main-product-image"
                onError={(e) => {
                  e.target.src = '/api/placeholder/400/400';
                }}
              />
              {product.is_featured && (
                <span className="featured-badge">‚≠ê ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</span>
              )}
              {isOutOfStock && (
                <div className="stock-overlay">
                  <span>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î</span>
                </div>
              )}
            </div>
            <div className="image-thumbnails">
              {mockImages.map((image, index) => (
                <img
                  key={index}
                  src={image}
                  alt={`${product.name} ${index + 1}`}
                  className={`thumbnail ${selectedImage === index ? 'active' : ''}`}
                  onClick={() => setSelectedImage(index)}
                  onError={(e) => {
                    e.target.src = '/api/placeholder/400/400';
                  }}
                />
              ))}
            </div>
          </div>
          
          {/* Product Info */}
          <div className="product-info">
            <div className="product-header">
              <h1 className="product-title">{product.name}</h1>
              <div className="product-meta">
                <span className="category">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {product.category_name}</span>
                <span className="product-id">‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: #{product.id}</span>
              </div>
            </div>

            <div className="price-section">
              {/* ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getProductPrice ‡πÅ‡∏ó‡∏ô */}
              <div className="current-price">{formatCurrency(getProductPrice(product))}</div>
              <div className="stock-info">
                <span className={`stock-status ${isOutOfStock ? 'out-of-stock' : 'in-stock'}`}>
                  {isOutOfStock ? '‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î' : `‚úÖ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${product.stock_quantity || 0} ‡∏ä‡∏¥‡πâ‡∏ô`}
                </span>
              </div>
            </div>
            
            <div className="product-description">
              <h3>üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
              <div className="description-content">
                {product.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'}
              </div>
            </div>
            
            {!isOutOfStock && (
              <div className="purchase-section">
                <div className="quantity-section">
                  <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</label>
                  <div className="quantity-controls">
                    <button 
                      className="quantity-btn minus"
                      onClick={() => handleQuantityChange(quantity - 1)}
                      disabled={quantity <= 1}
                    >
                      ‚àí
                    </button>
                    <input
                      type="number"
                      value={quantity}
                      onChange={(e) => handleQuantityChange(e.target.value)}
                      min="1"
                      max={product.stock_quantity}
                      className="quantity-input"
                    />
                    <button 
                      className="quantity-btn plus"
                      onClick={() => handleQuantityChange(quantity + 1)}
                      disabled={quantity >= product.stock_quantity}
                    >
                      +
                    </button>
                  </div>
                </div>

                <div className="total-price">
                  <span>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°: </span>
                  <span className="total-amount">
                    {/* ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getProductPrice ‡πÅ‡∏ó‡∏ô */}
                    {formatCurrency(getProductPrice(product) * quantity)}
                  </span>
                </div>
                
                <div className="action-buttons">
                  <button 
                    onClick={addToCart}
                    className="btn btn-secondary btn-lg"
                  >
                    üõí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                  </button>
                  <button 
                    onClick={buyNow}
                    className="btn btn-primary btn-lg"
                  >
                    üí≥ ‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                  </button>
                </div>
              </div>
            )}

            {/* Product Features */}
            <div className="product-features">
              <h3>‚ú® ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
              <ul className="features-list">
                <li>üöö ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®</li>
                <li>üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô QR PromptPay</li>
                <li>üîí ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</li>
                <li>üìû ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ 24/7</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Additional Info */}
        <div className="additional-info">
          <div className="info-tabs">
            <div className="tab-content">
              <div className="shipping-info">
                <h3>üöö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h3>
                <ul>
                  <li>‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢</li>
                  <li>‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 2-3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£</li>
                  <li>‡∏ü‡∏£‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 500 ‡∏ö‡∏≤‡∏ó</li>
                  <li>‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô</li>
                </ul>
              </div>
              
              <div className="return-policy">
                <h3>üîÑ ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
                <ul>
                  <li>‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô</li>
                  <li>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏°</li>
                  <li>‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</li>
                  <li>‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏£‡∏∞‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductDetail;