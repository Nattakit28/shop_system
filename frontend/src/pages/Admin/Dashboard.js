import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { adminAPI } from "../../services/api";

const AdminDashboard = () => {
  const [activeTab, setActiveTab] = useState("overview");
  const [stats, setStats] = useState({
    total_customers: 0,
    total_products: 0,
    total_orders: 0,
    total_revenue: 0,
  });
  const [recentOrders, setRecentOrders] = useState([]);
  const [topProducts, setTopProducts] = useState([]);
  const [ordersByStatus, setOrdersByStatus] = useState({});
  const [loading, setLoading] = useState(true);
  const [adminData, setAdminData] = useState(null);
  const [shopSettings, setShopSettings] = useState({});
  const [apiErrors, setApiErrors] = useState([]); // ‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° API errors
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("adminToken");
    if (!token) {
      navigate("/admin/login");
      return;
    }

    // Get admin data from localStorage if available
    const storedAdminData = localStorage.getItem("adminData");
    if (storedAdminData) {
      try {
        setAdminData(JSON.parse(storedAdminData));
      } catch (error) {
        console.error("Error parsing admin data:", error);
      }
    }

    fetchDashboardData();
  }, [navigate]);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      setApiErrors([]); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï errors
      console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î...");

      const errors = [];

      // ‚úÖ Fetch dashboard stats
      try {
        const statsRes = await adminAPI.getDashboardStats();
        if (statsRes.data) {
          setStats(statsRes.data);
          console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", statsRes.data);
        }
      } catch (err) {
        console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ:", err.message);
        errors.push("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ");
        setStats({
          total_customers: 0,
          total_products: 0,
          total_orders: 0,
          total_revenue: 0,
        });
      }

      // ‚úÖ Fetch recent orders
      try {
        const ordersRes = await adminAPI.getRecentOrders();
        if (ordersRes.data && Array.isArray(ordersRes.data)) {
          setRecentOrders(ordersRes.data.slice(0, 5));

          // Calculate orders by status
          const statusCount = ordersRes.data.reduce((acc, order) => {
            acc[order.status] = (acc[order.status] || 0) + 1;
            return acc;
          }, {});
          setOrdersByStatus(statusCount);
          console.log(
            "‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:",
            ordersRes.data.length,
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
          );
        }
      } catch (err) {
        console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ:", err.message);
        errors.push("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ");
        setRecentOrders([]);
        setOrdersByStatus({});
      }

      // ‚úÖ Fetch top products
      try {
        const productsRes = await adminAPI.getTopProducts();
        if (productsRes.data && Array.isArray(productsRes.data)) {
          setTopProducts(productsRes.data.slice(0, 5));
          console.log(
            "‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:",
            productsRes.data.length,
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
          );
        }
      } catch (err) {
        console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡πÑ‡∏î‡πâ:", err.message);
        errors.push("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡πÑ‡∏î‡πâ");
        setTopProducts([]);
      }

      // ‚úÖ Fetch shop settings
      try {
        const settingsRes = await adminAPI.getSettings();
        if (settingsRes.data && Array.isArray(settingsRes.data)) {
          const settingsObj = settingsRes.data.reduce((acc, setting) => {
            acc[setting.setting_key] = setting.setting_value;
            return acc;
          }, {});
          setShopSettings(settingsObj);
          console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        }
      } catch (err) {
        console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ:", err.message);
        errors.push("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ");
        setShopSettings({});
      }

      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      if (errors.length > 0) {
        setApiErrors(errors);
        showToast(`API ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${errors.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, "warning");
      } else {
        console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
        showToast("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
      }
    } catch (error) {
      console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î:", error);
      showToast("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", "error");
    } finally {
      setLoading(false);
    }
  };

  const showToast = (message, type = "info") => {
    const toast = document.createElement("div");
    toast.className = `toast-message ${type}`;
    toast.textContent = message;

    const colors = {
      error: "#f56565",
      success: "#48bb78",
      info: "#4299e1",
      warning: "#ed8936",
    };

    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${colors[type] || colors.info};
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      z-index: 10000;
      animation: slideInRight 0.3s ease;
      max-width: 400px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;

    document.body.appendChild(toast);

    setTimeout(() => {
      toast.style.animation = "slideOutRight 0.3s ease";
      setTimeout(() => toast.remove(), 300);
    }, 5000);
  };

  const handleLogout = () => {
    if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö?")) {
      localStorage.removeItem("adminToken");
      localStorage.removeItem("adminData");

      showToast("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");

      setTimeout(() => {
        navigate("/admin/login");
      }, 1000);
    }
  };

  const formatCurrency = (amount) => {
    try {
      return new Intl.NumberFormat("th-TH", {
        style: "currency",
        currency: "THB",
        minimumFractionDigits: 0,
      }).format(amount || 0);
    } catch (error) {
      return `‡∏ø${(amount || 0).toLocaleString()}`;
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    try {
      return new Date(dateString).toLocaleDateString("th-TH", {
        year: "numeric",
        month: "short",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });
    } catch (error) {
      return "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    }
  };

  const getStatusBadge = (status) => {
    const statusColors = {
      pending: { bg: "#fef3c7", color: "#92400e", text: "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞" },
      paid: { bg: "#d1fae5", color: "#065f46", text: "‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß" },
      confirmed: { bg: "#dbeafe", color: "#1e40af", text: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß" },
      shipped: { bg: "#e0e7ff", color: "#3730a3", text: "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß" },
      completed: { bg: "#dcfce7", color: "#166534", text: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" },
      cancelled: { bg: "#fee2e2", color: "#991b1b", text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" },
    };

    const style = statusColors[status] || statusColors.pending;

    return (
      <span
        style={{
          backgroundColor: style.bg,
          color: style.color,
          padding: "0.25rem 0.5rem",
          borderRadius: "0.375rem",
          fontSize: "0.75rem",
          fontWeight: "600",
        }}
      >
        {style.text}
      </span>
    );
  };

  if (loading) {
    return (
      <div className="admin-dashboard">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-dashboard">
      {/* Header */}
      <div className="admin-header">
        <div className="admin-title">
          <h1>üõ°Ô∏è {shopSettings.shop_name || "‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå"}</h1>
          <p>‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</p>
          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API */}
          {apiErrors.length > 0 && (
            <div
              style={{
                marginTop: "0.5rem",
                padding: "0.5rem",
                background: "#fed7d7",
                color: "#9b2c2c",
                borderRadius: "4px",
                fontSize: "0.8rem",
              }}
            >
              ‚ö†Ô∏è API ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ {apiErrors.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </div>
          )}
        </div>
        <div className="admin-actions">
          {adminData && (
            <div className="admin-info">
              <span className="admin-greeting">
                ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {adminData.first_name} {adminData.last_name}
              </span>
              <span className="admin-role">({adminData.role})</span>
            </div>
          )}
          <button
            onClick={() => window.open("/", "_blank")}
            className="btn btn-outline"
          >
            üëÅÔ∏è ‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô
          </button>
          <button
            onClick={fetchDashboardData}
            className="btn btn-info"
            title="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
          >
            üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
          </button>
          <button onClick={handleLogout} className="btn btn-secondary">
            üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
          </button>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="admin-tabs">
        <button
          className={`tab-btn ${activeTab === "overview" ? "active" : ""}`}
          onClick={() => setActiveTab("overview")}
        >
          üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
        </button>
        <button
          className={`tab-btn ${activeTab === "orders" ? "active" : ""}`}
          onClick={() => setActiveTab("orders")}
        >
          üìã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        </button>
        <button
          className={`tab-btn ${activeTab === "products" ? "active" : ""}`}
          onClick={() => setActiveTab("products")}
        >
          üì¶ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        </button>
        <button
          className={`tab-btn ${activeTab === "settings" ? "active" : ""}`}
          onClick={() => setActiveTab("settings")}
        >
          ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô
        </button>
      </div>

      {/* Tab Content */}
      <div className="tab-content">
        {activeTab === "overview" && (
          <div className="overview-tab">
            {/* Dashboard Stats */}
            <div className="dashboard-stats">
              <div className="stat-card orders">
                <div className="stat-icon">üìã</div>
                <div className="stat-info">
                  <h3>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
                  <p className="stat-number">{stats.total_orders || 0}</p>
                  <span className="stat-label">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                </div>
              </div>

              <div className="stat-card customers">
                <div className="stat-icon">üë•</div>
                <div className="stat-info">
                  <h3>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
                  <p className="stat-number">{stats.total_customers || 0}</p>
                  <span className="stat-label">‡∏Ñ‡∏ô</span>
                </div>
              </div>

              <div className="stat-card products">
                <div className="stat-icon">üì¶</div>
                <div className="stat-info">
                  <h3>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
                  <p className="stat-number">{stats.total_products || 0}</p>
                  <span className="stat-label">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                </div>
              </div>

              <div className="stat-card revenue">
                <div className="stat-icon">üí∞</div>
                <div className="stat-info">
                  <h3>‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°</h3>
                  <p className="stat-number revenue">
                    {formatCurrency(stats.total_revenue || 0)}
                  </p>
                  <span className="stat-label">‡∏ö‡∏≤‡∏ó</span>
                </div>
              </div>
            </div>
            {/* Order Status Overview */}
            {Object.keys(ordersByStatus).length > 0 && (
              <div className="order-status-overview">
                <h2>üìà ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h2>
                <div className="status-grid">
                  {Object.entries(ordersByStatus).map(([status, count]) => (
                    <div key={status} className="status-item">
                      <div className="status-count">{count}</div>
                      <div className="status-label">
                        {getStatusBadge(status)}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
            {/* Recent Orders */}
            {recentOrders.length > 0 && (
              <div className="recent-orders">
                <h2>üõí ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h2>
                <div className="orders-table">
                  <table>
                    <thead>
                      <tr>
                        <th>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</th>
                        <th>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
                        <th>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                        <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                      </tr>
                    </thead>
                    <tbody>
                      {recentOrders.map((order) => (
                        <tr key={order.id}>
                          <td className="order-number">{order.order_number}</td>
                          <td>{order.customer_name}</td>
                          <td className="amount">
                            {formatCurrency(order.total_amount)}
                          </td>
                          <td>{getStatusBadge(order.status)}</td>
                          <td className="date">
                            {formatDate(order.created_at)}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
            {/* Top Products */}
            {topProducts.length > 0 && (
              <div className="top-products">
                <h2>üèÜ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ</h2>
                <div className="products-grid">
                  {topProducts.map((product) => (
                    <div key={product.id} className="product-card">
                      <div className="product-info">
                        <h4>{product.name}</h4>
                        <p className="product-price">
                          {formatCurrency(product.price)}
                        </p>
                        <p className="product-stock">
                          ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:{" "}
                          <span
                            className={
                              product.stock_quantity < 10
                                ? "low-stock"
                                : "normal-stock"
                            }
                          >
                            {product.stock_quantity}
                          </span>{" "}
                          ‡∏ä‡∏¥‡πâ‡∏ô
                        </p>
                        {product.total_sold && (
                          <p className="product-sold">
                            ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ: {product.total_sold} ‡∏ä‡∏¥‡πâ‡∏ô
                          </p>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
            {/* Quick Actions */}
            <div className="quick-actions">
              <h2>‚ö° ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡πà‡∏ß‡∏ô</h2>
              <div className="action-grid">
                <button
                  className="action-card"
                  onClick={() => setActiveTab("orders")}
                >
                  <div className="action-icon">üìã</div>
                  <div>
                    <h3>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
                    <p>‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà</p>
                  </div>
                </button>

                <button
                  className="action-card"
                  onClick={() => setActiveTab("products")}
                >
                  <div className="action-icon">‚ûï</div>
                  <div>
                    <h3>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà</h3>
                    <p>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</p>
                  </div>
                </button>

                <button
                  className="action-card"
                  onClick={() => setActiveTab("settings")}
                >
                  <div className="action-icon">‚öôÔ∏è</div>
                  <div>
                    <h3>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô</h3>
                    <p>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞ PromptPay</p>
                  </div>
                </button>

                <button
                  className="action-card"
                  onClick={() => window.open("/", "_blank")}
                >
                  <div className="action-icon">üëÅÔ∏è</div>
                  <div>
                    <h3>‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô</h3>
                    <p>‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà</p>
                  </div>
                </button>
              </div>
            </div>
            {/* API Status Section */}
            {apiErrors.length > 0 && (
              <div className="api-status-section">
                <h2>‚ö†Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API</h2>
                <div className="api-status-card">
                  <div className="status-details">
                    <div className="status-item">
                      <span className="label">üîß ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:</span>
                      <span className="value warning">‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô</span>
                    </div>
                    <div className="status-item">
                      <span className="label">üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á:</span>
                      <span className="value">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</span>
                    </div>
                    <div className="status-item">
                      <span className="label">üõ†Ô∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</span>
                      <span className="value">
                        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Backend API ‡πÅ‡∏•‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                      </span>
                    </div>
                  </div>
                  <div className="error-list">
                    <h4>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤:</h4>
                    <ul>
                      {apiErrors.map((error, index) => (
                        <li key={index}>{error}</li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            )}
            {/* Admin Info Section */}
            (adminData || shopSettings) && (
            <div className="admin-info-section">
              <h2>ÔøΩ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>
              <div className="admin-info-card">
                <div className="admin-details">
                  {adminData && (
                    <>
                      <div className="detail-item">
                        <span className="label">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</span>{" "}
                        <span className="value">{adminData.username}</span>
                      </div>
                      <div className="detail-item">
                        <span className="label">‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•:</span>{" "}
                        <span className="value">{adminData.email}</span>
                      </div>
                      <div className="detail-item">
                        <span className="label">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</span>{" "}
                        <span className="value">
                          {adminData.first_name} {adminData.last_name}
                        </span>
                      </div>
                      <div className="detail-item">
                        <span className="label">‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó:</span>{" "}
                        <span className="value role">{adminData.role}</span>
                      </div>
                      <div className="detail-item">
                        <span className="label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>{" "}
                        <span className="value status">{adminData.status}</span>
                      </div>
                    </>
                  )}
                  {shopSettings && (
                    <>
                      <div className="detail-item">
                        <span className="label">‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô:</span>{" "}
                        <span className="value">{shopSettings.shop_name}</span>
                      </div>
                      <div className="detail-item">
                        <span className="label">‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡πâ‡∏≤‡∏ô:</span>{" "}
                        <span className="value">{shopSettings.shop_email}</span>
                      </div>
                      <div className="detail-item">
                        <span className="label">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏£‡πâ‡∏≤‡∏ô:</span>{" "}
                        <span className="value">{shopSettings.shop_phone}</span>
                      </div>
                      <div className="detail-item">
                        <span className="label">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô:</span>{" "}
                        <span className="value">
                          {shopSettings.shop_address}
                        </span>
                      </div>
                      <div className="detail-item">
                        <span className="label">PromptPay:</span>{" "}
                        <span className="value">
                          {shopSettings.promptpay_number}
                        </span>
                      </div>
                    </>
                  )}
                </div>
              </div>
            </div>
            )
          </div>
        )}

        {activeTab === "orders" && <OrderManagement />}
        {activeTab === "products" && <ProductManagement />}
        {activeTab === "settings" && (
          <ShopSettings
            shopSettings={shopSettings}
            onSettingsUpdate={fetchDashboardData}
          />
        )}
      </div>
    </div>
  );
};

// Order Management Component
const OrderManagement = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filterStatus, setFilterStatus] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [showOrderDetail, setShowOrderDetail] = useState(false);

  useEffect(() => {
    fetchOrders();
  }, []);

  const fetchOrders = async () => {
    try {
      setLoading(true);
      const response = await adminAPI.getRecentOrders();
      if (response.data && Array.isArray(response.data)) {
        setOrders(response.data);
      }
    } catch (error) {
      console.error("Error fetching orders:", error);
    } finally {
      setLoading(false);
    }
  };

  const updateOrderStatus = async (orderId, newStatus) => {
    console.log("Updating order status:", { orderId, newStatus });
    try {
      console.log("Updating order status:", { orderId, newStatus });
      const response = await adminAPI.updateOrderStatus(orderId, newStatus);

      if (!response.data.success) {
        throw new Error(
          response.data.message || "Failed to update order status"
        );
      }

      console.log(`Order ${orderId} updated to status: ${newStatus}`);
      // ... (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô state)
    } catch (error) {
      console.error("Error updating order status:", error.message);
      showToast("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "error");
    }
  };

  const showToast = (message, type = "info") => {
    const toast = document.createElement("div");
    toast.className = `toast-message ${type}`;
    toast.textContent = message;

    const colors = {
      error: "#f56565",
      success: "#48bb78",
      info: "#4299e1",
      warning: "#ed8936",
    };

    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${colors[type] || colors.info};
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      z-index: 10000;
      animation: slideInRight 0.3s ease;
      max-width: 400px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;

    document.body.appendChild(toast);

    setTimeout(() => {
      toast.style.animation = "slideOutRight 0.3s ease";
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  };

  const getStatusText = (status) => {
    const statusMap = {
      pending: "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞",
      paid: "‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß",
      confirmed: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
      shipped: "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß",
      completed: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
      cancelled: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    };
    return statusMap[status] || status;
  };

  const getStatusColor = (status) => {
    const statusColors = {
      pending: { bg: "#fef3c7", color: "#92400e" },
      paid: { bg: "#d1fae5", color: "#065f46" },
      confirmed: { bg: "#dbeafe", color: "#1e40af" },
      shipped: { bg: "#e0e7ff", color: "#3730a3" },
      completed: { bg: "#dcfce7", color: "#166534" },
      cancelled: { bg: "#fee2e2", color: "#991b1b" },
    };
    return statusColors[status] || statusColors.pending;
  };

  const formatCurrency = (amount) => {
    try {
      return new Intl.NumberFormat("th-TH", {
        style: "currency",
        currency: "THB",
        minimumFractionDigits: 0,
      }).format(amount || 0);
    } catch (error) {
      return `‡∏ø${(amount || 0).toLocaleString()}`;
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    try {
      return new Date(dateString).toLocaleDateString("th-TH", {
        year: "numeric",
        month: "short",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });
    } catch (error) {
      return "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    }
  };

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const filteredOrders = orders.filter((order) => {
    const matchesStatus =
      filterStatus === "all" || order.status === filterStatus;
    const matchesSearch =
      searchTerm === "" ||
      order.order_number.toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.customer_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.customer_phone.includes(searchTerm);
    return matchesStatus && matchesSearch;
  });

  const openOrderDetail = (order) => {
    setSelectedOrder(order);
    setShowOrderDetail(true);
  };

  useEffect(() => {
    console.log("[DEBUG] selectedOrder updated:", selectedOrder);
  }, [selectedOrder]);

  if (loading) {
    return (
      <div style={{ padding: "2rem", textAlign: "center" }}>
        <div className="loading-spinner"></div>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠...</p>
      </div>
    );
  }

  return (
    <div style={{ padding: "1rem" }}>
      <div style={{ marginBottom: "2rem" }}>
        <h2
          style={{
            margin: "0 0 1rem 0",
            display: "flex",
            alignItems: "center",
            gap: "0.5rem",
          }}
        >
          üìã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
          <span
            style={{
              fontSize: "0.9rem",
              background: "#e2e8f0",
              color: "#4a5568",
              padding: "0.25rem 0.5rem",
              borderRadius: "4px",
            }}
          >
            {filteredOrders.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </span>
        </h2>

        {/* ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
        <div
          style={{
            display: "flex",
            gap: "1rem",
            marginBottom: "1rem",
            flexWrap: "wrap",
            alignItems: "center",
          }}
        >
          <div>
            <label style={{ marginRight: "0.5rem", fontWeight: "bold" }}>
              ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:
            </label>
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              style={{
                padding: "0.5rem",
                border: "1px solid #d1d5db",
                borderRadius: "4px",
                background: "white",
              }}
            >
              <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
              <option value="pending">‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞</option>
              <option value="paid">‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß</option>
              <option value="confirmed">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</option>
              <option value="shipped">‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</option>
              <option value="completed">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</option>
              <option value="cancelled">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
            </select>
          </div>

          <div>
            <label style={{ marginRight: "0.5rem", fontWeight: "bold" }}>
              ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:
            </label>
            <input
              type="text"
              placeholder="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠, ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              style={{
                padding: "0.5rem",
                border: "1px solid #d1d5db",
                borderRadius: "4px",
                width: "300px",
              }}
            />
          </div>

          <button
            onClick={fetchOrders}
            style={{
              padding: "0.5rem 1rem",
              background: "#3b82f6",
              color: "white",
              border: "none",
              borderRadius: "4px",
              cursor: "pointer",
            }}
          >
            üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
          </button>
        </div>
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ */}
      {filteredOrders.length === 0 ? (
        <div
          style={{
            textAlign: "center",
            padding: "2rem",
            background: "#f9fafb",
            borderRadius: "8px",
            border: "1px solid #e5e7eb",
          }}
        >
          <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</p>
        </div>
      ) : (
        <div
          style={{
            background: "white",
            borderRadius: "8px",
            border: "1px solid #e5e7eb",
            overflow: "hidden",
          }}
        >
          <table style={{ width: "100%", borderCollapse: "collapse" }}>
            <thead>
              <tr
                style={{
                  background: "#f9fafb",
                  borderBottom: "1px solid #e5e7eb",
                }}
              >
                <th
                  style={{
                    padding: "1rem",
                    textAlign: "left",
                    fontWeight: "bold",
                  }}
                >
                  ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                </th>
                <th
                  style={{
                    padding: "1rem",
                    textAlign: "left",
                    fontWeight: "bold",
                  }}
                >
                  ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                </th>
                <th
                  style={{
                    padding: "1rem",
                    textAlign: "left",
                    fontWeight: "bold",
                  }}
                >
                  ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
                </th>
                <th
                  style={{
                    padding: "1rem",
                    textAlign: "right",
                    fontWeight: "bold",
                  }}
                >
                  ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
                </th>
                <th
                  style={{
                    padding: "1rem",
                    textAlign: "center",
                    fontWeight: "bold",
                  }}
                >
                  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                </th>
                <th
                  style={{
                    padding: "1rem",
                    textAlign: "left",
                    fontWeight: "bold",
                  }}
                >
                  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á
                </th>
                <th
                  style={{
                    padding: "1rem",
                    textAlign: "center",
                    fontWeight: "bold",
                  }}
                >
                  ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
                </th>
              </tr>
            </thead>
            <tbody>
              {filteredOrders.map((order, index) => {
                const statusStyle = getStatusColor(order.status);
                return (
                  <tr
                    key={order.id}
                    style={{
                      borderBottom:
                        index < filteredOrders.length - 1
                          ? "1px solid #e5e7eb"
                          : "none",
                      ":hover": { background: "#f9fafb" },
                    }}
                  >
                    <td style={{ padding: "1rem" }}>
                      <span
                        style={{ fontFamily: "monospace", fontWeight: "bold" }}
                      >
                        {order.order_number}
                      </span>
                    </td>
                    <td style={{ padding: "1rem" }}>{order.customer_name}</td>
                    <td style={{ padding: "1rem", fontFamily: "monospace" }}>
                      {order.customer_phone}
                    </td>
                    <td
                      style={{
                        padding: "1rem",
                        textAlign: "right",
                        fontWeight: "bold",
                      }}
                    >
                      {formatCurrency(order.total_amount)}
                    </td>
                    <td style={{ padding: "1rem", textAlign: "center" }}>
                      <span
                        style={{
                          background: statusStyle.bg,
                          color: statusStyle.color,
                          padding: "0.25rem 0.5rem",
                          borderRadius: "4px",
                          fontSize: "0.875rem",
                          fontWeight: "bold",
                        }}
                      >
                        {getStatusText(order.status)}
                      </span>
                    </td>
                    <td
                      style={{
                        padding: "1rem",
                        fontSize: "0.875rem",
                        color: "#6b7280",
                      }}
                    >
                      {formatDate(order.created_at)}
                    </td>
                    <td style={{ padding: "1rem", textAlign: "center" }}>
                      <div
                        style={{
                          display: "flex",
                          gap: "0.5rem",
                          justifyContent: "center",
                        }}
                      >
                        <button
                          onClick={() => openOrderDetail(order)}
                          style={{
                            padding: "0.25rem 0.5rem",
                            background: "#3b82f6",
                            color: "white",
                            border: "none",
                            borderRadius: "4px",
                            fontSize: "0.75rem",
                            cursor: "pointer",
                          }}
                        >
                          ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                        </button>

                        {order.status === "pending" && (
                          <button
                            onClick={() =>
                              updateOrderStatus(order.id, "confirmed")
                            }
                            style={{
                              padding: "0.25rem 0.5rem",
                              background: "#10b981",
                              color: "white",
                              border: "none",
                              borderRadius: "4px",
                              fontSize: "0.75rem",
                              cursor: "pointer",
                            }}
                          >
                            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                          </button>
                        )}

                        {order.status === "confirmed" && (
                          <button
                            onClick={() =>
                              updateOrderStatus(order.id, "shipped")
                            }
                            style={{
                              padding: "0.25rem 0.5rem",
                              background: "#8b5cf6",
                              color: "white",
                              border: "none",
                              borderRadius: "4px",
                              fontSize: "0.75rem",
                              cursor: "pointer",
                            }}
                          >
                            ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
                          </button>
                        )}

                        {order.status === "shipped" && (
                          <button
                            onClick={() =>
                              updateOrderStatus(order.id, "completed")
                            }
                            style={{
                              padding: "0.25rem 0.5rem",
                              background: "#059669",
                              color: "white",
                              border: "none",
                              borderRadius: "4px",
                              fontSize: "0.75rem",
                              cursor: "pointer",
                            }}
                          >
                            ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      )}

      {/* Modal ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ */}
      {showOrderDetail && selectedOrder && (
        <OrderDetailModal
          order={selectedOrder}
          onClose={() => setShowOrderDetail(false)}
          onStatusUpdate={updateOrderStatus}
          formatCurrency={formatCurrency}
          formatDate={formatDate}
          getStatusText={getStatusText}
          getStatusColor={getStatusColor}
        />
      )}
    </div>
  );
};

// Order Detail Modal Component
const OrderDetailModal = ({
  order,
  onClose,
  onStatusUpdate,
  formatCurrency,
  formatDate,
  getStatusText,
  getStatusColor,
}) => {
  const [orderItems, setOrderItems] = useState([]);
  const [loadingItems, setLoadingItems] = useState(true);
  const [currentOrder, setCurrentOrder] = useState(order);

  useEffect(() => {
    fetchOrderItems();
  }, []);

  useEffect(() => {
    setCurrentOrder(order);
  }, [order]);

  const fetchOrderItems = async () => {
    try {
      setLoadingItems(true);
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å API ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
      // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢: const response = await adminAPI.getOrderItems(order.id);
      const mockItems = [
        {
          id: 1,
          product_id: 1,
          product_name: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1",
          product_description: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
          quantity: 2,
          price: 450.0,
        },
        {
          id: 2,
          product_id: 2,
          product_name: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2",
          product_description: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
          quantity: 1,
          price: 890.0,
        },
      ];
      setOrderItems(mockItems);
    } catch (error) {
      console.error("Error fetching order items:", error);
    } finally {
      setLoadingItems(false);
    }
  };

  const statusStyle = getStatusColor(currentOrder.status);

  return (
    <div
      style={{
        position: "fixed",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: "rgba(0, 0, 0, 0.5)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: 1000,
      }}
    >
      <div
        style={{
          background: "white",
          borderRadius: "8px",
          padding: "2rem",
          maxWidth: "800px",
          width: "90%",
          maxHeight: "90vh",
          overflow: "auto",
        }}
      >
        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            marginBottom: "1.5rem",
          }}
        >
          <h2 style={{ margin: 0 }}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h2>
          <button
            onClick={onClose}
            style={{
              background: "none",
              border: "none",
              fontSize: "1.5rem",
              cursor: "pointer",
              padding: "0.5rem",
            }}
          >
            ‚úï
          </button>
        </div>

        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ */}
        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
            gap: "1rem",
            marginBottom: "2rem",
            padding: "1rem",
            background: "#f9fafb",
            borderRadius: "6px",
          }}
        >
          <div>
            <strong>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</strong>
            <br />
            <span style={{ fontFamily: "monospace", fontSize: "1.1rem" }}>
              {currentOrder.order_number}
            </span>
          </div>
          <div>
            <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</strong>
            <br />
            {currentOrder.customer_name}
          </div>
          <div>
            <strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</strong>
            <br />
            <span style={{ fontFamily: "monospace" }}>
              {currentOrder.customer_phone}
            </span>
          </div>
          <div>
            <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á:</strong>
            <br />
            {formatDate(currentOrder.created_at)}
          </div>
          <div>
            <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong>
            <br />
            <span
              style={{
                background: statusStyle.bg,
                color: statusStyle.color,
                padding: "0.25rem 0.5rem",
                borderRadius: "4px",
                fontSize: "0.875rem",
                fontWeight: "bold",
              }}
            >
              {getStatusText(currentOrder.status)}
            </span>
          </div>
          <div>
            <strong>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</strong>
            <br />
            <span
              style={{
                fontSize: "1.2rem",
                fontWeight: "bold",
                color: "#059669",
              }}
            >
              {formatCurrency(currentOrder.total_amount)}
            </span>
          </div>
        </div>

        {/* ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á */}
        {currentOrder.customer_address && (
          <div style={{ marginBottom: "1.5rem" }}>
            <h3 style={{ marginBottom: "0.5rem" }}>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</h3>
            <div
              style={{
                padding: "1rem",
                background: "#f3f4f6",
                borderRadius: "6px",
                border: "1px solid #d1d5db",
              }}
            >
              {currentOrder.customer_address}
            </div>
          </div>
        )}

        {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
        {currentOrder.notes && (
          <div style={{ marginBottom: "1.5rem" }}>
            <h3 style={{ marginBottom: "0.5rem" }}>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</h3>
            <div
              style={{
                padding: "1rem",
                background: "#fef3c7",
                borderRadius: "6px",
                border: "1px solid #fbbf24",
              }}
            >
              {currentOrder.notes}
            </div>
          </div>
        )}

        {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
        <div style={{ marginBottom: "1.5rem" }}>
          <h3 style={{ marginBottom: "1rem" }}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</h3>

          {loadingItems ? (
            <div style={{ textAlign: "center", padding: "2rem" }}>
              <div className="loading-spinner"></div>
              <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...</p>
            </div>
          ) : orderItems.length === 0 ? (
            <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
          ) : (
            <div
              style={{
                border: "1px solid #e5e7eb",
                borderRadius: "6px",
                overflow: "hidden",
              }}
            >
              <table style={{ width: "100%", borderCollapse: "collapse" }}>
                <thead>
                  <tr style={{ background: "#f9fafb" }}>
                    <th
                      style={{
                        padding: "0.75rem",
                        textAlign: "left",
                        borderBottom: "1px solid #e5e7eb",
                      }}
                    >
                      ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    </th>
                    <th
                      style={{
                        padding: "0.75rem",
                        textAlign: "center",
                        borderBottom: "1px solid #e5e7eb",
                      }}
                    >
                      ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                    </th>
                    <th
                      style={{
                        padding: "0.75rem",
                        textAlign: "right",
                        borderBottom: "1px solid #e5e7eb",
                      }}
                    >
                      ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
                    </th>
                    <th
                      style={{
                        padding: "0.75rem",
                        textAlign: "right",
                        borderBottom: "1px solid #e5e7eb",
                      }}
                    >
                      ‡∏£‡∏ß‡∏°
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {orderItems.map((item, index) => (
                    <tr
                      key={item.id}
                      style={{
                        borderBottom:
                          index < orderItems.length - 1
                            ? "1px solid #f3f4f6"
                            : "none",
                      }}
                    >
                      <td style={{ padding: "0.75rem" }}>
                        <div>
                          <div style={{ fontWeight: "bold" }}>
                            {item.product_name ||
                              `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: ${item.product_id}`}
                          </div>
                          {item.product_description && (
                            <div
                              style={{
                                fontSize: "0.875rem",
                                color: "#6b7280",
                                marginTop: "0.25rem",
                              }}
                            >
                              {item.product_description}
                            </div>
                          )}
                        </div>
                      </td>
                      <td
                        style={{
                          padding: "0.75rem",
                          textAlign: "center",
                          fontWeight: "bold",
                        }}
                      >
                        {item.quantity}
                      </td>
                      <td style={{ padding: "0.75rem", textAlign: "right" }}>
                        {formatCurrency(item.price)}
                      </td>
                      <td
                        style={{
                          padding: "0.75rem",
                          textAlign: "right",
                          fontWeight: "bold",
                        }}
                      >
                        {formatCurrency(item.price * item.quantity)}
                      </td>
                    </tr>
                  ))}
                </tbody>
                <tfoot>
                  <tr style={{ background: "#f9fafb" }}>
                    <td
                      colSpan="3"
                      style={{
                        padding: "1rem",
                        textAlign: "right",
                        fontWeight: "bold",
                        borderTop: "2px solid #e5e7eb",
                      }}
                    >
                      ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô:
                    </td>
                    <td
                      style={{
                        padding: "1rem",
                        textAlign: "right",
                        fontWeight: "bold",
                        fontSize: "1.1rem",
                        color: "#059669",
                        borderTop: "2px solid #e5e7eb",
                      }}
                    >
                      {formatCurrency(currentOrder.total_amount)}
                    </td>
                  </tr>
                </tfoot>
              </table>
            </div>
          )}
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
        <div
          style={{
            display: "flex",
            gap: "0.5rem",
            justifyContent: "flex-end",
            flexWrap: "wrap",
          }}
        >
          {currentOrder.status === "pending" && (
            <>
              <button
                onClick={() => {
                  onStatusUpdate(currentOrder.id, "confirmed");
                }}
                style={{
                  padding: "0.75rem 1.5rem",
                  background: "#10b981",
                  color: "white",
                  border: "none",
                  borderRadius: "6px",
                  cursor: "pointer",
                  fontWeight: "bold",
                }}
              >
                ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
              </button>
              <button
                onClick={() => {
                  onStatusUpdate(currentOrder.id, "cancelled");
                }}
                style={{
                  padding: "0.75rem 1.5rem",
                  background: "#ef4444",
                  color: "white",
                  border: "none",
                  borderRadius: "6px",
                  cursor: "pointer",
                  fontWeight: "bold",
                }}
              >
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
              </button>
            </>
          )}

          {currentOrder.status === "confirmed" && (
            <button
              onClick={() => {
                onStatusUpdate(currentOrder.id, "shipped");
              }}
              style={{
                padding: "0.75rem 1.5rem",
                background: "#8b5cf6",
                color: "white",
                border: "none",
                borderRadius: "6px",
                cursor: "pointer",
                fontWeight: "bold",
              }}
            >
              üöö ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            </button>
          )}

          {currentOrder.status === "shipped" && (
            <button
              onClick={() => {
                onStatusUpdate(currentOrder.id, "completed");
              }}
              style={{
                padding: "0.75rem 1.5rem",
                background: "#059669",
                color: "white",
                border: "none",
                borderRadius: "6px",
                cursor: "pointer",
                fontWeight: "bold",
              }}
            >
              ‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            </button>
          )}

          <button
            onClick={onClose}
            style={{
              padding: "0.75rem 1.5rem",
              background: "#6b7280",
              color: "white",
              border: "none",
              borderRadius: "6px",
              cursor: "pointer",
            }}
          >
            ‡∏õ‡∏¥‡∏î
          </button>
        </div>
      </div>
    </div>
  );
};

const ProductManagement = () => (
  <div
    style={{
      padding: "2rem",
      textAlign: "center",
      background: "white",
      borderRadius: "8px",
    }}
  >
    <h2>üì¶ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
    <p>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤</p>
    <p>‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</p>
  </div>
);

const ShopSettings = ({ shopSettings, onSettingsUpdate }) => {
  const [settings, setSettings] = useState({
    shop_name: "",
    promptpay_number: "",
    shop_address: "",
    shop_phone: "",
    shop_email: "",
  });
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    setSettings({
      shop_name: shopSettings.shop_name || "",
      promptpay_number: shopSettings.promptpay_number || "",
      shop_address: shopSettings.shop_address || "",
      shop_phone: shopSettings.shop_phone || "",
      shop_email: shopSettings.shop_email || "",
    });
  }, [shopSettings]);

  const showToast = (message, type = "info") => {
    const toast = document.createElement("div");
    toast.className = `toast-message ${type}`;
    toast.textContent = message;

    const colors = {
      error: "#f56565",
      success: "#48bb78",
      info: "#4299e1",
      warning: "#ed8936",
    };

    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${colors[type] || colors.info};
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      z-index: 10000;
      animation: slideInRight 0.3s ease;
      max-width: 400px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;

    document.body.appendChild(toast);

    setTimeout(() => {
      toast.style.animation = "slideOutRight 0.3s ease";
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setSettings((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    setSaving(true);

    try {
      console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:", settings);
      const response = await adminAPI.updateSettings(settings);

      if (response.data) {
        showToast("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", "success");

        // Refresh dashboard data
        if (onSettingsUpdate) {
          onSettingsUpdate();
        }
      }
    } catch (error) {
      console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:", error);
      showToast("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", "error");
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="shop-settings">
      <div className="shop-settings-card">
        <div className="settings-header">
          <h2>‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô</h2>
          <p>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ</p>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="settings-section">
            <h3>üè™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</h3>

            <div className="form-grid">
              <div className="form-group">
                <label>‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô</label>
                <input
                  type="text"
                  name="shop_name"
                  value={settings.shop_name}
                  onChange={handleChange}
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤"
                  className="form-input"
                />
              </div>

              <div className="form-group">
                <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏£‡πâ‡∏≤‡∏ô</label>
                <input
                  type="tel"
                  name="shop_phone"
                  value={settings.shop_phone}
                  onChange={handleChange}
                  placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
                  className="form-input"
                />
              </div>
            </div>

            <div className="form-group">
              <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡πâ‡∏≤‡∏ô</label>
              <input
                type="email"
                name="shop_email"
                value={settings.shop_email}
                onChange={handleChange}
                placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
                className="form-input"
              />
            </div>

            <div className="form-group">
              <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô</label>
              <textarea
                name="shop_address"
                value={settings.shop_address}
                onChange={handleChange}
                rows="3"
                placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤"
                className="form-textarea"
              />
            </div>
          </div>

          <div className="settings-section">
            <h3>üí≥ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PromptPay</h3>

            <div className="form-group">
              <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç PromptPay</label>
              <input
                type="text"
                name="promptpay_number"
                value={settings.promptpay_number}
                onChange={handleChange}
                placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
                className="form-input"
              />
              <small className="form-help">
                üí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (10 ‡∏´‡∏•‡∏±‡∏Å) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (13 ‡∏´‡∏•‡∏±‡∏Å)
              </small>
            </div>
          </div>

          <div className="form-actions">
            <button
              type="submit"
              disabled={saving}
              className={`btn-save ${saving ? "saving" : ""}`}
            >
              {saving ? (
                <>
                  <div className="loading-spinner-small"></div>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                </>
              ) : (
                "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AdminDashboard;
