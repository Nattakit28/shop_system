import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { orderAPI, paymentAPI } from '../services/api';
import QRPayment from '../components/QRPayment';
import { formatCurrency, formatDate } from '../utils/promptpay';

const PaymentConfirmation = () => {
  const { orderId } = useParams();
  const navigate = useNavigate();
  const [order, setOrder] = useState(null);
  const [showProofForm, setShowProofForm] = useState(false);
  const [paymentForm, setPaymentForm] = useState({
    paymentDateTime: '',
    notes: '',
    paymentSlip: null
  });
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    const fetchOrder = async () => {
      try {
        setLoading(true);
        const response = await orderAPI.getById(orderId);
        setOrder(response.data);
      } catch (error) {
        console.error('Error fetching order:', error);
        navigate('/');
      } finally {
        setLoading(false);
      }
    };

    if (orderId) {
      fetchOrder();
    }
  }, [orderId, navigate]);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
        return;
      }
      
      // Validate file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5MB)');
        return;
      }
      
      setPaymentForm(prev => ({
        ...prev,
        paymentSlip: file
      }));
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setPaymentForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmitProof = async (e) => {
    e.preventDefault();
    
    if (!paymentForm.paymentSlip) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô');
      return;
    }
    
    if (!paymentForm.paymentDateTime) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô');
      return;
    }

    setSubmitting(true);

    const formData = new FormData();
    formData.append('orderId', orderId);
    formData.append('paymentDateTime', paymentForm.paymentDateTime);
    formData.append('notes', paymentForm.notes);
    formData.append('paymentSlip', paymentForm.paymentSlip);

    try {
      await paymentAPI.submitProof(formData);
      
      // Show success message
      const message = document.createElement('div');
      message.className = 'toast-message success';
      message.textContent = '‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!';
      document.body.appendChild(message);
      
      setTimeout(() => {
        message.remove();
        navigate(`/thank-you/${order.order_number}`);
      }, 2000);
      
    } catch (error) {
      console.error('Payment proof submission error:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠...</p>
      </div>
    );
  }

  if (!order) {
    return (
      <div className="error-container">
        <div className="error-message">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</div>
        <button onClick={() => navigate('/')} className="btn btn-primary">
          ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        </button>
      </div>
    );
  }

  return (
    <div className="container">
      <div className="payment-confirmation">
        <div className="payment-header">
          <h1>üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h1>
          <div className="order-status">
            <span className="status-badge pending">‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</span>
          </div>
        </div>
        
        <div className="payment-content">
          {/* Order Information */}
          <div className="order-info-section">
            <h2>üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h2>
            <div className="order-details">
              <div className="detail-row">
                <span className="label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</span>
                <span className="value">{order.order_number}</span>
              </div>
              <div className="detail-row">
                <span className="label">‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</span>
                <span className="value">{order.customer_name}</span>
              </div>
              <div className="detail-row">
                <span className="label">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</span>
                <span className="value">{order.customer_phone}</span>
              </div>
              {order.customer_address && (
                <div className="detail-row">
                  <span className="label">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</span>
                  <span className="value">{order.customer_address}</span>
                </div>
              )}
              <div className="detail-row highlight">
                <span className="label">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                <span className="value total">{formatCurrency(order.total_amount)}</span>
              </div>
              <div className="detail-row">
                <span className="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</span>
                <span className="value">{formatDate(order.created_at)}</span>
              </div>
            </div>
          </div>

          {/* QR Payment */}
          <QRPayment orderId={orderId} />

          {/* Payment Proof Form */}
          <div className="payment-actions">
            <button 
              onClick={() => setShowProofForm(!showProofForm)}
              className={`btn ${showProofForm ? 'btn-secondary' : 'btn-primary'} btn-lg`}
            >
              {showProofForm ? 'üîΩ ‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°' : 'üì§ ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'}
            </button>
          </div>

          {showProofForm && (
            <div className="payment-proof-section">
              <h2>üì§ ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h2>
              <p className="section-description">
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
              </p>
              
              <form onSubmit={handleSubmitProof} className="payment-proof-form">
                <div className="form-row">
                  <div className="form-group">
                    <label htmlFor="paymentDateTime">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà-‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô *</label>
                    <input
                      id="paymentDateTime"
                      type="datetime-local"
                      name="paymentDateTime"
                      value={paymentForm.paymentDateTime}
                      onChange={handleInputChange}
                      max={new Date().toISOString().slice(0, 16)}
                      required
                    />
                  </div>
                </div>

                <div className="form-group">
                  <label htmlFor="paymentSlip">‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô *</label>
                  <div className="file-upload">
                    <input
                      id="paymentSlip"
                      type="file"
                      accept="image/*"
                      onChange={handleFileChange}
                      className="file-input"
                      required
                    />
                    <div className="file-upload-display">
                      {paymentForm.paymentSlip ? (
                        <div className="file-preview">
                          <span className="file-name">üìé {paymentForm.paymentSlip.name}</span>
                          <span className="file-size">
                            ({Math.round(paymentForm.paymentSlip.size / 1024)} KB)
                          </span>
                        </div>
                      ) : (
                        <div className="file-placeholder">
                          <span className="upload-icon">üì∑</span>
                          <span>‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ</span>
                        </div>
                      )}
                    </div>
                  </div>
                  <small className="form-help">
                    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå JPG, PNG ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB
                  </small>
                </div>

                <div className="form-group">
                  <label htmlFor="notes">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
                  <textarea
                    id="notes"
                    name="notes"
                    value={paymentForm.notes}
                    onChange={handleInputChange}
                    rows="3"
                    placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏î, ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô"
                  />
                </div>

                <div className="form-actions">
                  <button 
                    type="button"
                    onClick={() => setShowProofForm(false)}
                    className="btn btn-secondary"
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                  <button 
                    type="submit" 
                    className="btn btn-primary btn-lg"
                    disabled={submitting}
                  >
                    {submitting ? (
                      <>
                        <span className="loading-spinner small"></span>
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...
                      </>
                    ) : (
                      'üì§ ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'
                    )}
                  </button>
                </div>
              </form>
            </div>
          )}

          {/* Help Section */}
          <div className="help-section">
            <h3>‚ùì ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠?</h3>
            <div className="help-content">
              <p>
                ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° 
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
              </p>
              <div className="contact-methods">
                <div className="contact-item">
                  <span className="contact-icon">üìû</span>
                  <span>02-123-4567</span>
                </div>
                <div className="contact-item">
                  <span className="contact-icon">üìß</span>
                  <span>support@example.com</span>
                </div>
                <div className="contact-item">
                  <span className="contact-icon">üí¨</span>
                  <span>Line: @onlineshop</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentConfirmation;