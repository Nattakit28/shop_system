import React, { memo, useMemo, useCallback } from "react";

const CartComponent = memo(
  ({
    cartItems,
    onUpdateQuantity,
    onRemoveItem,
    showTitle = true,
    formatCurrency,
    stockInfo = {},
    loadingStock = false,
  }) => {
    console.log("üîÑ CartComponent render:", cartItems.length, "items");

    const totalPrice = useMemo(() => {
      return cartItems.reduce((total, item) => {
        const price = parseFloat(item.price) || 0;
        const quantity = parseInt(item.quantity) || 0;
        return total + price * quantity;
      }, 0);
    }, [cartItems]);

    const totalQuantity = useMemo(() => {
      return cartItems.reduce(
        (total, item) => total + (parseInt(item.quantity) || 0),
        0
      );
    }, [cartItems]);

    if (cartItems.length === 0) {
      return (
        <div className="empty-cart">
          <div className="empty-cart-icon">üõí</div>
          <h3>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤</h3>
          <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢!</p>
        </div>
      );
    }

    return (
      <div className="cart-component">
        {showTitle && <h2>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({cartItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</h2>}

        {loadingStock && (
          <div className="stock-loading">
            <div className="loading-spinner-small"></div>
            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å...</span>
          </div>
        )}

        <div className="cart-items">
          {cartItems.map((item) => (
            <CartItem
              key={item.id}
              item={item}
              formatCurrency={formatCurrency}
              onUpdateQuantity={onUpdateQuantity}
              onRemoveItem={onRemoveItem}
              stockInfo={stockInfo[item.id]}
              loadingStock={loadingStock}
            />
          ))}
        </div>

        <div className="cart-summary">
          <div className="summary-row">
            <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:</span>
            <span>{cartItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
          </div>
          <div className="summary-row">
            <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô:</span>
            <span>{totalQuantity} ‡∏ä‡∏¥‡πâ‡∏ô</span>
          </div>
          <div className="summary-row total">
            <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
            <span className="total-price">{formatCurrency(totalPrice)}</span>
          </div>
        </div>
      </div>
    );
  }
);

const CartItem = memo(
  ({
    item,
    formatCurrency,
    onUpdateQuantity,
    onRemoveItem,
    stockInfo,
    loadingStock,
  }) => {
    console.log("üîÑ CartItem render:", item.id, item.name);

    const availableStock = stockInfo?.available || 0;
    const isStockLoaded = stockInfo !== undefined;
    const canIncrease = isStockLoaded && item.quantity < availableStock;
    const isAtMaxStock = isStockLoaded && item.quantity >= availableStock;
    const isLowStock = isStockLoaded && availableStock <= 5;
    const isOutOfStock = availableStock === 0;

    const itemTotal = useMemo(() => {
      const price = parseFloat(item.price) || 0;
      const quantity = parseInt(item.quantity) || 0;
      return price * quantity;
    }, [item.price, item.quantity]);

    const handleQuantityDecrease = useCallback(() => {
      if (item.quantity > 1) {
        onUpdateQuantity(item.id, item.quantity - 1);
      }
    }, [item.id, item.quantity, onUpdateQuantity]);

    const handleQuantityIncrease = useCallback(() => {
      if (canIncrease) {
        onUpdateQuantity(item.id, item.quantity + 1);
      }
    }, [item.id, item.quantity, onUpdateQuantity, canIncrease]);

    const handleRemove = useCallback(() => {
      onRemoveItem(item.id);
    }, [item.id, onRemoveItem]);

    const getImageUrl = () => {
      if (!item.image_url) {
        return "/api/placeholder/80/80";
      }
      if (item.image_url.startsWith("http")) {
        return item.image_url;
      }
      return `http://localhost:3001${item.image_url}`;
    };

    return (
      <div className={`cart-item ${isOutOfStock ? "out-of-stock" : ""}`}>
        <div className="item-image">
          <img
            src={getImageUrl()}
            alt={item.name}
            onError={(e) => {
              e.target.src = "/api/placeholder/80/80";
            }}
          />

          {/* ‚úÖ Stock badge */}
          {isStockLoaded && (
            <div
              className={`stock-badge ${
                isOutOfStock
                  ? "out-of-stock"
                  : isLowStock
                  ? "low-stock"
                  : "in-stock"
              }`}
            >
              {isOutOfStock ? "‚ùå" : isLowStock ? "‚ö†Ô∏è" : "‚úÖ"} {availableStock}
            </div>
          )}
        </div>

        <div className="item-details">
          <h4 className="item-name">{item.name}</h4>
          <div className="item-price">{formatCurrency(item.price)} / ‡∏ä‡∏¥‡πâ‡∏ô</div>

          {/* ‚úÖ Stock information */}
          {isStockLoaded && (
            <div className="stock-info">
              {isOutOfStock ? (
                <span className="stock-status out-of-stock">‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î</span>
              ) : isAtMaxStock ? (
                <span className="stock-status max-reached">
                  üö´ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß
                </span>
              ) : isLowStock ? (
                <span className="stock-status low-stock">
                  ‚ö†Ô∏è ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {availableStock - item.quantity} ‡∏ä‡∏¥‡πâ‡∏ô
                </span>
              ) : (
                <span className="stock-status in-stock">
                  ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å {availableStock - item.quantity} ‡∏ä‡∏¥‡πâ‡∏ô
                </span>
              )}
            </div>
          )}

          {loadingStock && !isStockLoaded && (
            <div className="stock-loading-item">
              <div className="loading-spinner-mini"></div>
              <span>‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å...</span>
            </div>
          )}
        </div>

        <div className="quantity-controls">
          <button
            className="quantity-btn minus"
            onClick={handleQuantityDecrease}
            disabled={item.quantity <= 1}
            aria-label="‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
            title={item.quantity <= 1 ? "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å" : "‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"}
          >
            ‚àí
          </button>

          <span className="quantity">{item.quantity}</span>

          <button
            className={`quantity-btn plus ${
              !canIncrease && isStockLoaded ? "disabled" : ""
            }`}
            onClick={handleQuantityIncrease}
            disabled={!canIncrease && isStockLoaded}
            aria-label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
            title={
              !isStockLoaded
                ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å..."
                : isOutOfStock
                ? "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å"
                : isAtMaxStock
                ? `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß (${availableStock} ‡∏ä‡∏¥‡πâ‡∏ô)`
                : `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${availableStock - item.quantity} ‡∏ä‡∏¥‡πâ‡∏ô)`
            }
          >
            +
          </button>
        </div>

        <div className="item-total">{formatCurrency(itemTotal)}</div>

        <button
          className="remove-btn"
          onClick={handleRemove}
          aria-label={`‡∏•‡∏ö ${item.name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤`}
          title="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
        >
          üóëÔ∏è
        </button>
      </div>
    );
  }
);

CartComponent.displayName = "CartComponent";
CartItem.displayName = "CartItem";

export default CartComponent;